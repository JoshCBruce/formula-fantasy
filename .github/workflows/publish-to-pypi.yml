name: Publish Formula Fantasy to PyPI

# Trigger on version tags (v1.0.0, v1.1.0, etc.)
on:
  push:
    tags:
      - 'v*.*.*'
  # Also allow manual triggering
  workflow_dispatch:

jobs:
  # Update version numbers automatically
  update-version:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Extract version from tag
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION from tag: $TAG"
    
    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = "[^"]*"/version = "${{ steps.version.outputs.version }}"/' pyproject.toml
        echo "‚úÖ Updated pyproject.toml version to ${{ steps.version.outputs.version }}"
    
    - name: Update version in setup.py
      run: |
        sed -i 's/version="[^"]*"/version="${{ steps.version.outputs.version }}"/' setup.py
        echo "‚úÖ Updated setup.py version to ${{ steps.version.outputs.version }}"
    
    - name: Update version in __init__.py
      run: |
        sed -i 's/__version__ = "[^"]*"/__version__ = "${{ steps.version.outputs.version }}"/' formula_fantasy/__init__.py
        echo "‚úÖ Updated __init__.py version to ${{ steps.version.outputs.version }}"
    
    - name: Commit version updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml setup.py formula_fantasy/__init__.py
        git commit -m "ü§ñ Auto-update version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        git push origin HEAD:main || echo "Nothing to push"

  # Test the package before publishing
  test:
    needs: update-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main  # Use updated main branch
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .
    
    - name: Test package imports
      run: |
        python -c "from formula_fantasy import get_driver_points, get_constructor_points"
        python -c "from formula_fantasy import list_drivers, list_constructors, get_latest_round"
        echo "‚úÖ All imports successful"
    
    - name: Test CLI functionality
      run: |
        python -m formula_fantasy.cli --drivers
        echo "‚úÖ CLI test successful"

  # Build and publish to PyPI
  publish-pypi:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main  # Use updated main branch with version changes
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Extract version from tag
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Publishing version: $VERSION"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Verify version consistency
      run: |
        echo "Checking version consistency..."
        grep 'version = "${{ steps.version.outputs.version }}"' pyproject.toml || echo "‚ö†Ô∏è pyproject.toml version mismatch"
        grep 'version="${{ steps.version.outputs.version }}"' setup.py || echo "‚ö†Ô∏è setup.py version mismatch"
        grep '__version__ = "${{ steps.version.outputs.version }}"' formula_fantasy/__init__.py || echo "‚ö†Ô∏è __init__.py version mismatch"
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Formula Fantasy v${{ steps.version.outputs.version }}
        body: |
          ## Formula Fantasy v${{ steps.version.outputs.version }}
          
          **ü§ñ Automated release with auto-versioning**
          
          ### üì¶ Installation
          ```bash
          pip install --upgrade formula-fantasy==${{ steps.version.outputs.version }}
          ```
          
          ### ‚ú® What's New
          - Version automatically updated in all files
          - Package available at: https://pypi.org/project/formula-fantasy/
          - Check commit history for detailed changes
          
          ### üß™ Verification
          ```python
          from formula_fantasy import get_driver_points, __version__
          print(f"Version: {__version__}")
          print(f"VER latest: {get_driver_points('VER', 'latest')}")
          ```
          
          ### üìä CLI Usage
          ```bash
          formula-fantasy --drivers
          formula-fantasy VER latest
          ```
        draft: false
        prerelease: false

  # Test installation from PyPI
  test-installation:
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Wait for PyPI propagation
      run: sleep 60
    
    - name: Test installation from PyPI
      run: |
        pip install formula-fantasy
        python -c "from formula_fantasy import get_driver_points; print('‚úÖ Installation successful')"
        formula-fantasy --drivers
        echo "‚úÖ Package successfully published and tested"